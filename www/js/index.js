// Generated by CoffeeScript 1.10.0
(function() {
  'use strict';
  var app, textDecoder, textEncoder;

  app = {};

  window.app = app;

  if (window.TextEncoder) {
    textEncoder = new TextEncoder('utf-8');
    textDecoder = new TextDecoder('utf-8');
    app.StringFromArrayBuffer = function(buf) {
      return textDecoder.decode(new Uint8Array(buf));
    };
    app.ArrayBufferFromString = function(str) {
      return textEncoder.encode(str).buffer;
    };
  } else {
    app.StringFromArrayBuffer = function(buf) {
      return String.fromCharCode.apply(null, new Uint8Array(buf));
    };
    app.ArrayBufferFromString = function(str) {
      var buf, bufView, i, j, ref, strLen;
      strLen = str.length;
      buf = new ArrayBuffer(strLen);
      bufView = new Uint8Array(buf);
      for (i = j = 0, ref = strLen; j < ref; i = j += 1) {
        bufView[i] = str.charCodeAt(i);
      }
      return buf;
    };
  }

  document.addEventListener('deviceready', function() {
    var btnConnect, btnListen, btnPing, btnRequestDiscoverable, btnStartDiscovery, btnStopDiscovery, dom, domIds, id, j, len, lstDiscoveredDevs, lstKnownDevs, onAdapterStateChangedCounter;
    domIds = ['adapterEvent', 'adapterAddress', 'adapterName', 'adapterEnabled', 'adapterDiscovering', 'adapterDiscoverable', 'deviceAddress', 'deviceName', 'devicePaired', 'deviceUuids', 'receiveErrorCount', 'receiveErrorSocketId', 'receiveErrorMessage', 'acceptErrorCount', 'acceptErrorSocketId', 'acceptErrorMessage', 'createSocketId', 'clientSocketId', 'connected', 'txCount', 'rxCount', 'rxDataLen', 'rxData', 'pingTime'];
    dom = {};
    for (j = 0, len = domIds.length; j < len; j++) {
      id = domIds[j];
      dom[id] = document.getElementById(id);
    }
    onAdapterStateChangedCounter = 0;
    networking.bluetooth.getAdapterState(function(adapter) {
      dom.adapterEvent.innerHTML = 'getAdapterState';
      dom.adapterAddress.innerHTML = String(adapter.address);
      dom.adapterName.innerHTML = String(adapter.name);
      dom.adapterEnabled.innerHTML = String(adapter.enabled);
      dom.adapterDiscovering.innerHTML = String(adapter.discovering);
      dom.adapterDiscoverable.innerHTML = String(adapter.discoverable);
    });
    networking.bluetooth.onAdapterStateChanged.addListener(function(adapter) {
      onAdapterStateChangedCounter += 1;
      dom.adapterEvent.innerHTML = ['onAdapterStateChanged', String(onAdapterStateChangedCounter)].join(' ');
      dom.adapterAddress.innerHTML = String(adapter.address);
      dom.adapterName.innerHTML = String(adapter.name);
      dom.adapterEnabled.innerHTML = String(adapter.enabled);
      dom.adapterDiscovering.innerHTML = String(adapter.discovering);
      dom.adapterDiscoverable.innerHTML = String(adapter.discoverable);
    });
    app.nextID = 0;
    app.devices = {};
    app.selectedDevice = null;
    app.showDeviceInfo = function(e) {
      var btn, device;
      btn = e.target;
      id = btn.getAttribute('id');
      device = app.devices[id];
      app.selectedDevice = device;
      dom.deviceAddress.innerHTML = String(device.address);
      dom.deviceName.innerHTML = String(device.name);
      dom.devicePaired.innerHTML = String(device.paired);
      dom.deviceUuids.innerHTML = String(device.uuids);
    };
    lstKnownDevs = document.getElementById('lstKnownDevs');
    networking.bluetooth.getDevices(function(devices) {
      var btn, device, k, len1;
      for (k = 0, len1 = devices.length; k < len1; k++) {
        device = devices[k];
        btn = document.createElement('button');
        btn.setAttribute('type', 'button');
        btn.classList.add('list-group-item');
        id = ['btDev', String(app.nextID)].join('');
        btn.setAttribute('id', id);
        btn.innerHTML = [String(device.address), String(device.name)].join(' ');
        lstKnownDevs.appendChild(btn);
        btn.addEventListener('click', app.showDeviceInfo);
        app.nextID += 1;
        app.devices[id] = device;
      }
    });
    btnRequestDiscoverable = document.getElementById('btnRequestDiscoverable');
    btnRequestDiscoverable.addEventListener('click', function() {
      networking.bluetooth.requestDiscoverable();
    });
    lstDiscoveredDevs = document.getElementById('lstDiscoveredDevs');
    networking.bluetooth.onDeviceAdded.addListener(function(device) {
      var btn;
      btn = document.createElement('button');
      btn.setAttribute('type', 'button');
      btn.classList.add('list-group-item');
      id = ['btDev', String(app.nextID)].join('');
      btn.setAttribute('id', id);
      btn.innerHTML = [String(device.address), String(device.name)].join(' ');
      lstDiscoveredDevs.appendChild(btn);
      btn.addEventListener('click', app.showDeviceInfo);
      app.nextID += 1;
      app.devices[id] = device;
    });
    btnStartDiscovery = document.getElementById('btnStartDiscovery');
    btnStartDiscovery.addEventListener('click', function() {
      networking.bluetooth.startDiscovery();
    });
    btnStopDiscovery = document.getElementById('btnStopDiscovery');
    btnStopDiscovery.addEventListener('click', function() {
      networking.bluetooth.stopDiscovery();
    });
    btnListen = document.getElementById('btnListen');
    btnConnect = document.getElementById('btnConnect');
    btnPing = document.getElementById('btnPing');
    app.receive_error_count = 0;
    app.accept_error_count = 0;
    app.tx_count = 0;
    app.rx_count = 0;
    app.socketId = null;
    app.clientSocketId = null;
    app.uuid = '94f39d29-7d6d-437d-973b-fba39e49d4ee';
    app.listening = false;
    app.connected = false;
    app.pingStr = 'Ping Message\n';
    app.pongStr = 'Pong Message\n';
    app.pingData = app.ArrayBufferFromString(app.pingStr);
    app.pongData = app.ArrayBufferFromString(app.pongStr);
    app.startTime = performance.now();
    dom.connected.innerHTML = String(app.connected);
    networking.bluetooth.onReceiveError.addListener(function(errorInfo) {
      console.log(errorInfo);
      app.receive_error_count += 1;
      dom.receiveErrorCount.innerHTML = String(app.receive_error_count);
      dom.receiveErrorSocketId.innerHTML = String(errorInfo.socketId);
      dom.receiveErrorMessage.innerHTML = String(errorInfo.errorMessage);
    });
    networking.bluetooth.onAcceptError.addListener(function(errorInfo) {
      console.log(errorInfo);
      app.accept_error_count += 1;
      dom.acceptErrorCount.innerHTML = String(app.accept_error_count);
      dom.acceptErrorSocketId.innerHTML = String(errorInfo.socketId);
      dom.acceptErrorMessage.innerHTML = String(errorInfo.errorMessage);
    });
    btnListen.addEventListener('click', function() {
      if (!app.listening) {
        networking.bluetooth.listenUsingRfcomm(app.uuid, function(socketId) {
          app.socketId = socketId;
          dom.createSocketId.innerHTML = String(socketId);
          app.listening = true;
          networking.bluetooth.onAccept.addListener(function(acceptInfo) {
            if (acceptInfo.socketId !== app.socketId) {
              console.log('onAccept -- acceptInfo.socketId != app.socketId');
              return;
            }
            dom.clientSocketId.innerHTML = String(acceptInfo.clientSocketId);
            app.clientSocketId = acceptInfo.clientSocketId;
          });
        }, function(errorMessage) {
          console.error(errorMessage);
          dom.createSocketId.innerHTML = String("ERROR: " + errorMessage);
        });
      }
    });
    btnConnect.addEventListener('click', function() {
      var device;
      if (!app.connected) {
        device = app.selectedDevice;
        networking.bluetooth.connect(device.address, app.uuid, function(socketId) {
          app.socketId = socketId;
          dom.createSocketId.innerHTML = String(socketId);
          app.connected = true;
          dom.connected.innerHTML = String(app.connected);
        }, function(errorMessage) {
          console.error(errorMessage);
          dom.createSocketId.innerHTML = String("ERROR: " + errorMessage);
        });
      }
    });
    btnPing.addEventListener('click', function() {
      var socket_id;
      if (app.clientSocketId !== null) {
        socket_id = app.clientSocketId;
      } else if (app.connected) {
        socket_id = app.socketId;
      } else {
        console.log('btnPing -- No socket ID');
        return;
      }
      app.tx_count += 1;
      dom.txCount.innerHTML = String(app.tx_count);
      app.startTime = performance.now();
      networking.bluetooth.send(socket_id, app.pingData);
    });
    networking.bluetooth.onReceive.addListener(function(receiveInfo) {
      var data, ping_time, socket_id;
      ping_time = performance.now() - app.startTime;
      if (app.clientSocketId !== null) {
        socket_id = app.clientSocketId;
      } else if (app.connected) {
        socket_id = app.socketId;
      } else {
        console.log('onReceive -- No socket ID');
        return;
      }
      if (receiveInfo.socketId !== socket_id) {
        console.log('onReceive -- receiveInfo.socketId != socket_id');
        return;
      }
      data = app.StringFromArrayBuffer(receiveInfo.data);
      if (data === app.pingStr) {
        networking.bluetooth.send(socket_id, app.pongData);
      } else {
        dom.pingTime.innerHTML = String(ping_time);
      }
      app.rx_count += 1;
      dom.rxCount.innerHTML = String(app.rx_count);
      dom.rxDataLen.innerHTML = String(data.length);
      dom.rxData.innerHTML = String(data);
    });
    return app.testHugeBuffer = function() {
      var buf, bufView, i, k, ref, send_time, socket_id, startTime;
      buf = new ArrayBuffer(4096);
      bufView = new Uint8Array(buf);
      for (i = k = 0, ref = bufView.length; k < ref; i = k += 1) {
        bufView[i] = 0x55;
      }
      if (app.clientSocketId !== null) {
        socket_id = app.clientSocketId;
      } else {
        socket_id = app.socketId;
      }
      startTime = performance.now();
      networking.bluetooth.send(socket_id, buf, function(num_byte) {
        var end_time;
        end_time = performance.now() - startTime;
        console.log("success: " + num_byte);
        return console.log("end_time: " + end_time);
      }, function(errorMessage) {
        var end_time;
        end_time = performance.now() - startTime;
        console.log("error: " + errorMessage);
        return console.log("end_time: " + end_time);
      });
      send_time = performance.now() - startTime;
      console.log("send_time: " + send_time);
    };
  }, false);

}).call(this);
